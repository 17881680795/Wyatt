# -*- coding:utf-8 -*-
# @Auther:    Wyatt
# @Date:     2023-03-26
# @FileName: 节省内存的函数.py
1.  生成器（Generators）：使用yield语句生成数据，而不是将所有数据存储在内存中。
"""
用途：生成器是一个高级的  Python  编程模式，能够在一次生成一个值的前提下迭代大量的值，从而节省内存。它的用途包括：

1.  惰性计算：生成器允许我们惰性地计算和处理数据，只在需要时才产生所需的值，而不是预先把所有数据都生成出来再进行处理。

2.  生成大量数据：生成器可以生成大量的数据，而不会耗尽内存或导致程序崩溃。

3.  优化循环操作：生成器可以在每个循环中动态生成值，而无需将所有值都存储在内存中，从而提高循环效率。

4.  协程：生成器还可以用于实现协程，允许多个协程在同一个线程中运行，从而实现并发编程。

5.  序列操作：生成器可以用于执行各种序列操作，如过滤、映射、归约等，可以帮助我们更加简洁、高效地处理序列数据。
"""

2.  迭代器（Iterators）：使用迭代器进行操作可以逐个获取数据，也可以使用next()函数逐步获取数据，不会一次性占用太多内存。

3.  range()函数：  range()函数生成一个整数序列，不会占用太多内存。
4.  map()函数：  map()函数能够对序列进行单一操作，将结果作为迭代器返回，可以大大减少内存使用。
5.  filter()函数：  filter()函数根据条件筛选序列中的数据，将结果作为迭代器返回，同样可以减少内存的使用。
6.  heapq模块：heapq模块包含堆的操作，可以快速操作大量数据而不会占用太多内存。
7.  itertools模块：itertools模块包含许多函数，可以用来生成迭代器和组合器，可以大大减少内存的使用